{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset178 NotoNastaliqUrdu;}
{\colortbl;\red255\green255\blue255;\red252\green101\blue166;\red185\green188\blue186;}
{\*\expandedcolortbl;;\cssrgb\c100000\c49823\c70969;\cssrgb\c77255\c78431\c77647;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\b\fs170 \cf0 R
\fs80 edux Workflow
\fs30 :
\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0\fs32 \cf0 Action : they change the state.\
Reducer : they are the states\
\
Action : \
\cb2 export const action = (payload)=>\{\
			/// it will return another function which will take dispatch as a parameter ///\
			return (dispatch) = >\{\
 				dispatch(\{\
						type : what type of action,\
						payload : what payload\})\
						\} \cb1 \
\
Reducer : \
\cb2 export const reducer = (state = provided state , actionName) =>\{\
	//check what type of action is coming //\
	if action.type == provided action \{\
		return state + action.payload\
		\}\
\}\cb1 \
\
Store :\
\
import thunkMiddleware , createStore , combine reducer \
\
\cb2 const rootReducer = combinereducer(\{\
state Name : Reducer Name ,\
state Name : Redcuer Name ,\
)\}\
\
export const createStore = createStore (rootReducer , ApplyMiddleware(thunkMiddleware));\

\f2 \cf3 \cb1 \expnd0\expndtw0\kerning0
\

\f1 \cf0 \kerning1\expnd0\expndtw0  \
Accessing state : \
import useSelector from react-redux;\
\
inside component \
\
\cb2 const stateName = useSelector( state => state.statefromstore);\cb1 \
 \
display where ever in the template like this \{stateName.whatever\}\
 \
\
Alter state : \
import dispatch from  react-redux;\
import action from \'91./action.js\'92;\
inside component from where you wana change the state\
\
\cb2 const dispatch = useDispatch();\
\
return (\
	<button onclick=\{()=>\{dispatch(action(x))\} />\
 )\

\fs40 \cb1 \
/// we can create another file name as action creators and inside it ///\
export * as actionCreators from \'91./actions.js\'92 ;\
\
and then => onclick = \{ () => actionCreators.action(10)\}\
\

\f3 //// 
\f1 concept of action and reducer ///\
when you dispatch an action =>\
\
action => action.type \
when you dispatch an action it goes in store and check in all reducers which reducer has case(switch) for that action.type and then that reducer updates the state\'85\
 
\f3 \

\f1 \
\
\
\
 }